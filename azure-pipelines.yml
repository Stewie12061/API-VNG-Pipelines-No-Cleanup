parameters:
  - name: deploymentName
    type: string
    default: test
    
trigger: none

resources:
  - repo: self

pool:
  name: Stewie

jobs:
- job: DeployAll
  displayName: 'Deploy API and WEB For ${{ parameters.deploymentName }}'
  steps:
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/'
        artifact: 'manifests'
        publishLocation: 'pipeline'
      displayName: 'Publish Pipeline Artifact'

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(Pipeline.Workspace)/manifests'
      displayName: 'Download Pipeline Artifact'

    - powershell: |
        $SA_PASSWORD = "${env:SA_PASSWORD}"
        $SQLSERVER = "${env:SQLSERVER}"
        $DNS_APIKEY = "${env:DNS_APIKEY}"
        $DNS_APISECRET = "${env:DNS_APISECRET}"
        $DOMAIN = "${env:DOMAIN}"
        $templateFiles = Get-ChildItem -Path $(Pipeline.Workspace)/manifests -Filter '*.yaml' -Recurse
        foreach ($file in $templateFiles) {
          (Get-Content $file.FullName) | ForEach-Object {
            $_ -replace '\$\(deploymentName\)', '${{ parameters.deploymentName }}' `
              -replace '\$\(SQLSERVER\)', "$SQLSERVER" `
              -replace '\$\(SA_PASSWORD\)', "$SA_PASSWORD"
          } | Set-Content $file.FullName
        }
      env:
        SA_PASSWORD: $(SA_PASSWORD)
        WEBSERVER_PASSWORD: $(WEBSERVER_PASSWORD)
        
      displayName: 'Replace Variables in YAML Templates'

    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: 'VNG K8s API'
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/job-restore-db.yaml
      displayName: 'Deploy restore database job'

    - powershell: |
        # Additional step to wait for the database to be ONLINE
        $DatabaseName = "1BOSS_${{ parameters.deploymentName }}"
        $ServerName = "${env:SQLSERVER}"
        $DBPassword = "${env:SA_PASSWORD}"

        Write-Host "Server Name: $ServerName"
        Write-Host "Database Name: $DatabaseName"

        # Loop for a maximum of $maxAttempts times
        $maxAttempts = 10
        $attempts = 0
        while ($attempts -lt $maxAttempts) {
            $attempts++

            $connectionString = "Server=$ServerName;Database=master;User Id=sa;Password=$DBPassword;TrustServerCertificate=True;"
            $databaseStatus = Invoke-Sqlcmd -ConnectionString $connectionString -Query "SELECT state_desc FROM sys.databases WHERE name = '$DatabaseName'"
            $databaseState = $databaseStatus.state_desc

            Write-Host "Database state: $databaseState"

            if ($databaseState -eq "ONLINE") {
                Write-Host "Database is now ONLINE. Proceeding with deployment."
                break
            }
            Write-Host "Waiting for the database to be ONLINE. Attempt $attempts of $maxAttempts."
            Start-Sleep -Seconds 10
        }
        # Check if the loop exited due to reaching the maximum number of attempts
        if ($attempts -eq $maxAttempts) {
            Write-Host "Database did not come ONLINE after $maxAttempts attempts. Canceling deployment."
            exit 1  # Exit the script with a non-zero status code to mark it as failed
        }
      env:
        SA_PASSWORD: $(SA_PASSWORD)
        DNS_APIKEY: $(DNS_APIKEY)
        DNS_APISECRET: $(DNS_APISECRET)
        WEBSERVER_PASSWORD: $(WEBSERVER_PASSWORD)
      displayName: 'Check database status'
    
    - powershell: |
        $apiKey = "${env:DNS_APIKEY}"
        $apiSecret = "${env:DNS_APISECRET}"

        # Set the domain and record information
        $domain = "${env:DOMAIN}"
        $recordType = "A"
        $recordName = "${{ parameters.deploymentName }}api"
        $recordData = "${env:DNS_RECORD_DATA_API}"
        $ttl = 600

        # Construct the API endpoint URL
        $apiEndpoint = "https://api.godaddy.com/v1/domains/$domain/records"

        # Construct the headers
        $headers = @{
            'Authorization' = "sso-key $($apiKey):$($apiSecret)"
            'Content-Type'  = 'application/json'
        }

        # Construct the payload for the new DNS record
        $payload = ConvertTo-Json @(@{type=$recordType;name=$recordName;data=$recordData;ttl=$ttl})

        # Make the API request to create the DNS record
        $response = Invoke-WebRequest -Uri $apiEndpoint -Method Patch -Headers $headers -Body $payload

        # Display the response
        $response
      env:
        SA_PASSWORD: $(SA_PASSWORD)
        DNS_APIKEY: $(DNS_APIKEY)
        DNS_APISECRET: $(DNS_APISECRET)
        WEBSERVER_PASSWORD: $(WEBSERVER_PASSWORD)
      displayName: 'Add DNS Record For API'

    - task: KubernetesManifest@1
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: 'VNG K8s API'
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/manifests/api-deploy.yaml
          $(Pipeline.Workspace)/manifests/api-job-ingress-add-host.yaml
      displayName: 'Deploy api'
    
    - powershell: |
        $apiKey = "${env:DNS_APIKEY}"
        $apiSecret = "${env:DNS_APISECRET}"

        # Set the domain and record information
        $domain = "${env:DOMAIN}"
        $recordType = "A"
        $recordName = "${{ parameters.deploymentName }}web"
        $recordData = "${env:DNS_RECORD_DATA_WEB}"
        $ttl = 600

        # Construct the API endpoint URL
        $apiEndpoint = "https://api.godaddy.com/v1/domains/$domain/records"

        # Construct the headers
        $headers = @{
            'Authorization' = "sso-key $($apiKey):$($apiSecret)"
            'Content-Type'  = 'application/json'
        }

        # Construct the payload for the new DNS record
        $payload = ConvertTo-Json @(@{type=$recordType;name=$recordName;data=$recordData;ttl=$ttl})

        # Make the API request to create the DNS record
        $response = Invoke-WebRequest -Uri $apiEndpoint -Method Patch -Headers $headers -Body $payload

        # Display the response
        $response
      env:
        SA_PASSWORD: $(SA_PASSWORD)
        DNS_APIKEY: $(DNS_APIKEY)
        DNS_APISECRET: $(DNS_APISECRET)
        WEBSERVER_PASSWORD: $(WEBSERVER_PASSWORD)
      displayName: 'Add DNS Record For Web'
    
    - task: PowerShellOnTargetMachines@3
      displayName: "Create IIS Web"
      inputs:
        Machines: '$(WEB_SERVER_IP):5986'
        UserName: '$(WEBSERVER_USERNAME)'
        UserPassword: '$(WEBSERVER_PASSWORD)'
        InlineScript: |
          $folderName="${{ parameters.deploymentName }}"
          $SA_PASSWORD="$(SA_PASSWORD)"
          $SQLSERVER="$(SQLSERVER)"

          # Create publish folder
          Start-Process "robocopy.exe" -ArgumentList "C:\Publish0", "C:\WebDemo\$folderName", "/E", "/MIR", "/MT:4", "/np", "/ndl", "/nfl", "/nc", "/ns" -Wait
          $siteName = "$folderName"
          $publishFolder = "C:\Web\$folderName"
          $applicationPoolName = "$folderName"
          $bindingIPAddress = "*"
          $bindingPort = "80"
          $hostname = "${folderName}web.minhnhut.online"  # Fix: Added $ before folderName

          # Check if IIS module is installed
          if (-not (Get-Module -ListAvailable -Name WebAdministration)) {
              Install-Module -Name WebAdministration -Force -AllowClobber
          }

          # Import the WebAdministration module
          Import-Module WebAdministration

          # Create Application Pool
          New-WebAppPool -Name $applicationPoolName

          # Create Website with Custom Binding
          New-Website -Name $siteName -PhysicalPath $publishFolder -ApplicationPool $applicationPoolName -Port $bindingPort -HostHeader $hostname -Force

          Write-Host "Website '$siteName' created successfully."

          # Define the path to the web.config file
          $configFilePath = "C:\Web\$folderName\web.config"

          # Check if the file exists
          if (Test-Path $configFilePath) {
              # Load the content of the web.config file
              $configContent = Get-Content -Path $configFilePath -Raw

              # Perform the necessary modifications (replace database names)
              $configContent = $configContent -replace "Server=SQLServer,1433;Database=DBDataName;User ID=username; Password=password;", "Server=$SQLSERVER,1433;Database=1BOSS_$folderName;User ID=sa; Password=$SA_PASSWORD;"
              $configContent = $configContent -replace "Server=SQLServer,1433;Database=DBAdminName;User ID=username; Password=password;", "Server=$SQLSERVER,1433;Database=AS_ADMIN_1BOSS_$folderName;User ID=sa; Password=$SA_PASSWORD;"

              # Save the modified content back to the web.config file
              $configContent | Set-Content -Path $configFilePath

              Write-Host "web.config file updated successfully."
          } else {
              Write-Host "The web.config file does not exist in the specified path."
          }
        
        NewPsSessionOptionArguments: '-SkipCACheck -SkipCNCheck -SkipRevocationCheck'
        ignoreLASTEXITCODE: true
        RunPowershellInParallel: false
      env:
        SA_PASSWORD: $(SA_PASSWORD)
        DNS_APIKEY: $(DNS_APIKEY)
        DNS_APISECRET: $(DNS_APISECRET)
        WEBSERVER_PASSWORD: $(WEBSERVER_PASSWORD)
